async function updateVercelEnv(key, value) { const { VERCEL_TOKEN, VERCEL_PROJECT_ID, VERCEL_TEAM_ID } = process.env; const API_URL = `https://api.vercel.com/v9/projects/${VERCEL_PROJECT_ID}/env`; const response = await fetch(API_URL + `?teamId=${VERCEL_TEAM_ID || ''}`, { headers: { 'Authorization': `Bearer ${VERCEL_TOKEN}` } }); const { envs } = await response.json(); const existingVar = envs.find(v => v.key === key); if (existingVar) { await fetch(`${API_URL}/${existingVar.id}?teamId=${VERCEL_TEAM_ID || ''}`, { method: 'PATCH', headers: { 'Authorization': `Bearer ${VERCEL_TOKEN}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ value }) }); } else { await fetch(API_URL + `?teamId=${VERCEL_TEAM_ID || ''}`, { method: 'POST', headers: { 'Authorization': `Bearer ${VERCEL_TOKEN}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ key, value, type: 'encrypted', target: ['production', 'preview', 'development'] }) }); } }
export default async function handler(request, response) { if (!process.env.VERCEL_TOKEN || !process.env.VERCEL_PROJECT_ID) { return response.status(500).json({ message: "Konfigurasi Vercel API Token / Project ID belum diatur." }); } if (request.method === 'POST') { try { const { ptero_domain, ptero_admin_api_key, ptero_client_api_key } = request.body; if (ptero_domain) await updateVercelEnv('PTERO_DOMAIN', ptero_domain); if (ptero_admin_api_key) await updateVercelEnv('PTERO_ADMIN_API_KEY', ptero_admin_api_key); if (ptero_client_api_key) await updateVercelEnv('PTERO_CLIENT_API_KEY', ptero_client_api_key); return response.status(200).json({ message: "Konfigurasi berhasil disimpan. Perubahan akan aktif setelah redeploy." }); } catch (error) { return response.status(500).json({ message: error.message }); } } return response.status(405).end(); }